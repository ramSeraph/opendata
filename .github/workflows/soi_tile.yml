name: SOI Tile Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:


jobs:
  Check-For-Work:
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ github.token }}
    outputs: 
      work_item_count: ${{ steps.work.outputs.num_items }}  
    steps:
      - uses: actions/checkout@v4.1.7
      - name: Check for work
        id: work
        run: |
          cd maps/SOI
          mkdir data
          util/get_work_for_tiler.sh data/to_retile.txt
          cat data/to_retile.txt
          num_items=$(wc -l data/to_retile.txt | tr -s " " | cut -d" " -f1)
          echo "num_items=$num_items"
          echo "num_items=$num_items" >> $GITHUB_OUTPUT


  Run-SOI-Tiling:
    needs: Check-For-Work
    if: needs.Check-For-Work.outputs.work_item_count != '0'
    timeout-minutes: 600
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ github.token }}
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Setup swap
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 12

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            maps/SOI/partition.py.lock
            maps/SOI/retile.py.lock
          version: ">=0.5.29"

      - name: Restore ancillary files from cache
        uses: ramSeraph/cache-always@v0.0.1
        with:
          path: |
            maps/SOI/data/index.geojson
          key: 'SOI-parse-basefiles-v1'
        id: base-files-cache

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev

      - name: Get current date
        run: echo "date=$(date +'%d%b%Y')" >> $GITHUB_OUTPUT
        id: date

      - name: Restore run data from cache
        uses: ramSeraph/cache-always@v0.0.1
        with:
          path: |
            staging/
            export/
            !export/pmtiles/*
          key:  soi-gcs-v6-${{ steps.date.outputs.date }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            soi-gcs-v6-${{ steps.date.outputs.date }}-${{ github.run_number }}-
            soi-gcs-v6-${{ steps.date.outputs.date }}-

      - name: Retile
        id: retile
        run: |
          cd maps/SOI
          util/get_work_for_tiler.sh data/to_retile.txt

          if [[ ! -e staging/download_done ]]; then
            echo "=== downloading pmtiles files from soi-latest ==="
            mkdir -p export/pmtiles
            gh release download soi-latest -D export/pmtiles
            mkdir -p staging
            touch staging/download_done
          fi

          if [[ ! -e staging/retiling_done ]]; then
            mkdir -p export/tiles/
            mkdir -p staging/tiles/
            mkdir -p staging/pmtiles/
            echo "=== running retiler ==="
            [[ -f data/index.geojson ]] || wget -P data/ https://github.com/ramSeraph/opendata/releases/download/soi-ancillary/index.geojson
            GDAL_VERSION=$(gdalinfo --version | cut -d"," -f1 | cut -d" " -f2)
            uv run --with GDAL==${GDAL_VERSION} retile.py data/to_retile.txt
            rm -rf export/gtiffs/
            rm -rf export/tiles/
            rm -rf staging/gtiffs/
            touch staging/retiling_done
          fi

          if [[ ! -e staging/partitioned ]]; then
            echo "=== running partitioner ==="
            mkdir temp
            TMPDIR=./temp uv run partition.py
            rm -rf export/
            rm -rf staging/tiles/*
            touch staging/partitioned
          fi

          find staging/pmtiles -type f > release_files.txt || touch release_files.txt
          staging_files=$(cat release_files.txt)
          num_release_files=$(wc -l release_files.txt | tr -s " " | cut -d" " -f1)
          echo "num_release_files=$num_release_files"
          echo "num_release_files=$num_release_files" >> $GITHUB_OUTPUT
          echo "staging_files: $staging_files"
          echo "release_files<<EOF" >> $GITHUB_OUTPUT
          echo "$staging_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          rm release_files.txt

      - name: Push pmtiles
        id: push-pmtiles
        if: steps.retile.outputs.num_release_files != '0'
        uses: ./.github/actions/releaser
        with:
          name: "SOI Open Series Maps"
          tag_name: soi-latest
          assets: ${{ steps.partition-pmtiles.outputs.release_files }}
          body: "SOI Open Series Maps as partitioned PMTiles."
          gh_token: ${{ secrets.github_token }}

      - name: Cleanup
        run: |
          gh release download soi-tiffs list.txt
          mv list.txt tiled_list.txt
          gh release upload soi-tiffs tiled_list.txt --clobber
          rm tiled_list.txt
          rm -rf staging/* || true

      - name: Setup fly tools
        if: steps.push-pmtiles.outcome == 'success'
        uses: superfly/flyctl-actions/setup-flyctl@1.5

      - name: Restart Fly Server
        if: steps.push-pmtiles.status == 'success'
        run: |
          flyctl scale count 0 --app indianopenmaps -y
          flyctl scale count 1 --app indianopenmaps -y

  SOI-Tile-Failure-Notify:
    needs: 
      - Run-SOI-Tiling
      - Check-For-Work
    if: always() && ( needs.Check-For-Work.result == 'failure' || needs.Run-SOI-Tiling.result == 'failure' )
    uses: ./.github/workflows/common-pb-alert.yml
    secrets: inherit
    with:
      title: "SOI Tile Run Failed"
      which-run: "self"
