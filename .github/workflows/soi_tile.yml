name: SOI Tile Run

concurrency: 
  group: ${{ github.workflow }}
  cancel-in-progress: true

on: 
  workflow_dispatch:
  workflow_run:
    workflows:
      - "SOI Weekly Parse Run"
    type:
      - completed

jobs:
  Check-For-Work:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ github.token }}
    outputs: 
      work_item_count: ${{ steps.work.outputs.num_items }}  
    steps:
      - uses: actions/checkout@v4.1.7
      - name: Check for work
        id: work
        run: |
          cd maps/SOI
          mkdir data
          util/get_work_for_tiler.sh data/to_retile.txt
          cat data/to_retile.txt
          num_items=$(wc -l data/to_retile.txt | tr -s " " | cut -d" " -f1)
          echo "num_items=$num_items"
          echo "num_items=$num_items" >> $GITHUB_OUTPUT


  Run-SOI-Tiling:
    needs: Check-For-Work
    if: ( github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' ) && needs.Check-For-Work.outputs.work_item_count != '0'
    timeout-minutes: 600
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ github.token }}
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Setup swap
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 12

      - uses: actions/checkout@v4.1.7

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            maps/SOI/partition.py.lock
            maps/SOI/retile.py.lock

      - name: Restore ancillary files from cache
        uses: actions/cache/restore@v4
        with:
          path: |
            maps/SOI/data/index.geojson
          key: 'SOI-tile-basefiles-v1'
        id: base-files-cache

      - name: Download index file
        if: ${{ steps.base-files-cache.outputs.cache-hit != 'true' }}
        run: |
          cd maps/SOI
          mkdir -p data
          [[ -f data/index.geojson ]] || wget -P data/ https://github.com/ramSeraph/opendata/releases/download/soi-ancillary/index.geojson

      - name: Save ancillary files to cache
        if: ${{ steps.base-files-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            maps/SOI/data/index.geojson
          key: 'SOI-tile-basefiles-v1'

      - name: Authenticate with GCP
        run: |
          gcloud auth activate-service-account --key-file=<(echo ${{ secrets.GCP_AUTH }} | base64 -d)

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev

      - name: Get current date
        run: echo "date=$(date +'%d%b%Y')" >> $GITHUB_OUTPUT
        id: date

      - name: Retile
        id: retile
        run: |
          cd maps/SOI
          mkdir -p data
          util/get_work_for_tiler.sh data/to_retile.txt

          echo "=== downloading pmtiles files from soi-latest ==="
          mkdir -p export/pmtiles
          mkdir -p staging

          gh release download soi-latest -p '*' -D export/pmtiles

          mkdir -p staging/tiles/
          mkdir -p staging/gtiffs/


          echo "=== getting available tiff list ==="
          gh release download soi-tiffs -p listing_files.csv
          cat listing_files.csv | cut -d"," -f1 | cut -d"." -f1 > gtiff_list.txt

          echo "=== getting list of tiffs to pull ==="
          GDAL_VERSION=$(gdalinfo --version | cut -d"," -f1 | cut -d" " -f2)
          echo "GDAL_VERSION=$GDAL_VERSION"
          uv venv
          uv pip install numpy pillow mercantile pmtiles setuptools wheel
          uv pip install --no-build-isolation --no-cache-dir --force-reinstall GDAL==${GDAL_VERSION}
          uv run retile.py data/to_retile.txt gtiff_list.txt sheet_list.txt
          
          echo "=== downlaoding the tiffs ==="
          cmd=""
          while read p; do
            echo "downloading $p"
            cat listing_files.csv | grep "^${p}.tif," | cut -d"," -f3 | xargs -I {} wget -q -P staging/gtiffs/ {}
          done < sheet_list.txt
          rm sheet_list.txt

          echo "=== running retiler ==="
          uv run retile.py data/to_retile.txt gtiff_list.txt
          
          rm gtiff_list.txt
          rm -rf staging/gtiffs/

          echo "=== running partitioner ==="
          mkdir -p staging/pmtiles/
          mkdir temp

          TMPDIR=./temp uv run partition.py

          rm -rf staging/tiles/*

          echo "=== backing up existing pmtiles files to GCS ==="
          gsutil -m cp export/pmtiles/* gs://soi_data/pmtiles_backup/
          rm -rf export/

          gh release view soi-latest --json assets -q '.assets[] | "\(.name)"' > release_assets.txt

          while read a; do
            echo "deleting $a from soi-latest"
            gh release delete-asset soi-latest $a -y
          done < release_assets.txt

          gh release upload soi-latest staging/pmtiles/*

          echo "=== Updating sheet lists ==="
          gh release upload soi-latest listing_files.csv --clobber
          rm listing_files.csv

          echo "=== cleaning up ==="
          rm -rf staging/* || true


      - name: Setup fly tools
        if: steps.retile.outcome == 'success'
        uses: superfly/flyctl-actions/setup-flyctl@1.5

      - name: Restart Fly Server
        if: steps.retile.status == 'success'
        run: |
          flyctl scale count 0 --app indianopenmaps -y
          flyctl scale count 1 --app indianopenmaps -y

  SOI-Tile-Failure-Notify:
    needs: 
      - Run-SOI-Tiling
      - Check-For-Work
    if: always() && ( needs.Check-For-Work.result == 'failure' || needs.Run-SOI-Tiling.result == 'failure' )
    uses: ./.github/workflows/common-pb-alert.yml
    secrets: inherit
    with:
      title: "SOI Tile Run Failed"
      which-run: "self"

  BuildDocs:
    needs: 
      - Run-SOI-Tiling
      - Check-For-Work
    uses: ./.github/workflows/docs.yml
    secrets: inherit

