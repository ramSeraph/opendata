(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){var bbox=require("@turf/bbox");var booleanIntersects=require("@turf/boolean-intersects");module.exports={...require("@turf/invariant"),bbox:bbox.default,booleanIntersects:booleanIntersects.default}},{"@turf/bbox":2,"@turf/boolean-intersects":4,"@turf/invariant":7}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var meta_1=require("@turf/meta");function bbox(geojson){var result=[Infinity,Infinity,-Infinity,-Infinity];meta_1.coordEach(geojson,function(coord){if(result[0]>coord[0]){result[0]=coord[0]}if(result[1]>coord[1]){result[1]=coord[1]}if(result[2]<coord[0]){result[2]=coord[0]}if(result[3]<coord[1]){result[3]=coord[1]}});return result}bbox["default"]=bbox;exports.default=bbox},{"@turf/meta":10}],3:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});var boolean_point_in_polygon_1=__importDefault(require("@turf/boolean-point-in-polygon"));var line_intersect_1=__importDefault(require("@turf/line-intersect"));var meta_1=require("@turf/meta");var polygon_to_line_1=__importDefault(require("@turf/polygon-to-line"));function booleanDisjoint(feature1,feature2){var bool=true;meta_1.flattenEach(feature1,function(flatten1){meta_1.flattenEach(feature2,function(flatten2){if(bool===false){return false}bool=disjoint(flatten1.geometry,flatten2.geometry)})});return bool}function disjoint(geom1,geom2){switch(geom1.type){case"Point":switch(geom2.type){case"Point":return!compareCoords(geom1.coordinates,geom2.coordinates);case"LineString":return!isPointOnLine(geom2,geom1);case"Polygon":return!boolean_point_in_polygon_1.default(geom1,geom2)}break;case"LineString":switch(geom2.type){case"Point":return!isPointOnLine(geom1,geom2);case"LineString":return!isLineOnLine(geom1,geom2);case"Polygon":return!isLineInPoly(geom2,geom1)}break;case"Polygon":switch(geom2.type){case"Point":return!boolean_point_in_polygon_1.default(geom2,geom1);case"LineString":return!isLineInPoly(geom1,geom2);case"Polygon":return!isPolyInPoly(geom2,geom1)}}return false}function isPointOnLine(lineString,pt){for(var i=0;i<lineString.coordinates.length-1;i++){if(isPointOnLineSegment(lineString.coordinates[i],lineString.coordinates[i+1],pt.coordinates)){return true}}return false}function isLineOnLine(lineString1,lineString2){var doLinesIntersect=line_intersect_1.default(lineString1,lineString2);if(doLinesIntersect.features.length>0){return true}return false}function isLineInPoly(polygon,lineString){for(var _i=0,_a=lineString.coordinates;_i<_a.length;_i++){var coord=_a[_i];if(boolean_point_in_polygon_1.default(coord,polygon)){return true}}var doLinesIntersect=line_intersect_1.default(lineString,polygon_to_line_1.default(polygon));if(doLinesIntersect.features.length>0){return true}return false}function isPolyInPoly(feature1,feature2){for(var _i=0,_a=feature1.coordinates[0];_i<_a.length;_i++){var coord1=_a[_i];if(boolean_point_in_polygon_1.default(coord1,feature2)){return true}}for(var _b=0,_c=feature2.coordinates[0];_b<_c.length;_b++){var coord2=_c[_b];if(boolean_point_in_polygon_1.default(coord2,feature1)){return true}}var doLinesIntersect=line_intersect_1.default(polygon_to_line_1.default(feature1),polygon_to_line_1.default(feature2));if(doLinesIntersect.features.length>0){return true}return false}function isPointOnLineSegment(lineSegmentStart,lineSegmentEnd,pt){var dxc=pt[0]-lineSegmentStart[0];var dyc=pt[1]-lineSegmentStart[1];var dxl=lineSegmentEnd[0]-lineSegmentStart[0];var dyl=lineSegmentEnd[1]-lineSegmentStart[1];var cross=dxc*dyl-dyc*dxl;if(cross!==0){return false}if(Math.abs(dxl)>=Math.abs(dyl)){if(dxl>0){return lineSegmentStart[0]<=pt[0]&&pt[0]<=lineSegmentEnd[0]}else{return lineSegmentEnd[0]<=pt[0]&&pt[0]<=lineSegmentStart[0]}}else if(dyl>0){return lineSegmentStart[1]<=pt[1]&&pt[1]<=lineSegmentEnd[1]}else{return lineSegmentEnd[1]<=pt[1]&&pt[1]<=lineSegmentStart[1]}}function compareCoords(pair1,pair2){return pair1[0]===pair2[0]&&pair1[1]===pair2[1]}exports.default=booleanDisjoint},{"@turf/boolean-point-in-polygon":5,"@turf/line-intersect":8,"@turf/meta":10,"@turf/polygon-to-line":11}],4:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});var boolean_disjoint_1=__importDefault(require("@turf/boolean-disjoint"));var meta_1=require("@turf/meta");function booleanIntersects(feature1,feature2){var bool=false;meta_1.flattenEach(feature1,function(flatten1){meta_1.flattenEach(feature2,function(flatten2){if(bool===true){return true}bool=!boolean_disjoint_1.default(flatten1.geometry,flatten2.geometry)})});return bool}exports.default=booleanIntersects},{"@turf/boolean-disjoint":3,"@turf/meta":10}],5:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var invariant_1=require("@turf/invariant");function booleanPointInPolygon(point,polygon,options){if(options===void 0){options={}}if(!point){throw new Error("point is required")}if(!polygon){throw new Error("polygon is required")}var pt=invariant_1.getCoord(point);var geom=invariant_1.getGeom(polygon);var type=geom.type;var bbox=polygon.bbox;var polys=geom.coordinates;if(bbox&&inBBox(pt,bbox)===false){return false}if(type==="Polygon"){polys=[polys]}var insidePoly=false;for(var i=0;i<polys.length&&!insidePoly;i++){if(inRing(pt,polys[i][0],options.ignoreBoundary)){var inHole=false;var k=1;while(k<polys[i].length&&!inHole){if(inRing(pt,polys[i][k],!options.ignoreBoundary)){inHole=true}k++}if(!inHole){insidePoly=true}}}return insidePoly}exports.default=booleanPointInPolygon;function inRing(pt,ring,ignoreBoundary){var isInside=false;if(ring[0][0]===ring[ring.length-1][0]&&ring[0][1]===ring[ring.length-1][1]){ring=ring.slice(0,ring.length-1)}for(var i=0,j=ring.length-1;i<ring.length;j=i++){var xi=ring[i][0];var yi=ring[i][1];var xj=ring[j][0];var yj=ring[j][1];var onBoundary=pt[1]*(xi-xj)+yi*(xj-pt[0])+yj*(pt[0]-xi)===0&&(xi-pt[0])*(xj-pt[0])<=0&&(yi-pt[1])*(yj-pt[1])<=0;if(onBoundary){return!ignoreBoundary}var intersect=yi>pt[1]!==yj>pt[1]&&pt[0]<(xj-xi)*(pt[1]-yi)/(yj-yi)+xi;if(intersect){isInside=!isInside}}return isInside}function inBBox(pt,bbox){return bbox[0]<=pt[0]&&bbox[1]<=pt[1]&&bbox[2]>=pt[0]&&bbox[3]>=pt[1]}},{"@turf/invariant":7}],6:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.earthRadius=6371008.8;exports.factors={centimeters:exports.earthRadius*100,centimetres:exports.earthRadius*100,degrees:exports.earthRadius/111325,feet:exports.earthRadius*3.28084,inches:exports.earthRadius*39.37,kilometers:exports.earthRadius/1e3,kilometres:exports.earthRadius/1e3,meters:exports.earthRadius,metres:exports.earthRadius,miles:exports.earthRadius/1609.344,millimeters:exports.earthRadius*1e3,millimetres:exports.earthRadius*1e3,nauticalmiles:exports.earthRadius/1852,radians:1,yards:exports.earthRadius*1.0936};exports.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:1/1e3,kilometres:1/1e3,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/exports.earthRadius,yards:1.0936133};exports.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046};function feature(geom,properties,options){if(options===void 0){options={}}var feat={type:"Feature"};if(options.id===0||options.id){feat.id=options.id}if(options.bbox){feat.bbox=options.bbox}feat.properties=properties||{};feat.geometry=geom;return feat}exports.feature=feature;function geometry(type,coordinates,_options){if(_options===void 0){_options={}}switch(type){case"Point":return point(coordinates).geometry;case"LineString":return lineString(coordinates).geometry;case"Polygon":return polygon(coordinates).geometry;case"MultiPoint":return multiPoint(coordinates).geometry;case"MultiLineString":return multiLineString(coordinates).geometry;case"MultiPolygon":return multiPolygon(coordinates).geometry;default:throw new Error(type+" is invalid")}}exports.geometry=geometry;function point(coordinates,properties,options){if(options===void 0){options={}}if(!coordinates){throw new Error("coordinates is required")}if(!Array.isArray(coordinates)){throw new Error("coordinates must be an Array")}if(coordinates.length<2){throw new Error("coordinates must be at least 2 numbers long")}if(!isNumber(coordinates[0])||!isNumber(coordinates[1])){throw new Error("coordinates must contain numbers")}var geom={type:"Point",coordinates:coordinates};return feature(geom,properties,options)}exports.point=point;function points(coordinates,properties,options){if(options===void 0){options={}}return featureCollection(coordinates.map(function(coords){return point(coords,properties)}),options)}exports.points=points;function polygon(coordinates,properties,options){if(options===void 0){options={}}for(var _i=0,coordinates_1=coordinates;_i<coordinates_1.length;_i++){var ring=coordinates_1[_i];if(ring.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var j=0;j<ring[ring.length-1].length;j++){if(ring[ring.length-1][j]!==ring[0][j]){throw new Error("First and last Position are not equivalent.")}}}var geom={type:"Polygon",coordinates:coordinates};return feature(geom,properties,options)}exports.polygon=polygon;function polygons(coordinates,properties,options){if(options===void 0){options={}}return featureCollection(coordinates.map(function(coords){return polygon(coords,properties)}),options)}exports.polygons=polygons;function lineString(coordinates,properties,options){if(options===void 0){options={}}if(coordinates.length<2){throw new Error("coordinates must be an array of two or more positions")}var geom={type:"LineString",coordinates:coordinates};return feature(geom,properties,options)}exports.lineString=lineString;function lineStrings(coordinates,properties,options){if(options===void 0){options={}}return featureCollection(coordinates.map(function(coords){return lineString(coords,properties)}),options)}exports.lineStrings=lineStrings;function featureCollection(features,options){if(options===void 0){options={}}var fc={type:"FeatureCollection"};if(options.id){fc.id=options.id}if(options.bbox){fc.bbox=options.bbox}fc.features=features;return fc}exports.featureCollection=featureCollection;function multiLineString(coordinates,properties,options){if(options===void 0){options={}}var geom={type:"MultiLineString",coordinates:coordinates};return feature(geom,properties,options)}exports.multiLineString=multiLineString;function multiPoint(coordinates,properties,options){if(options===void 0){options={}}var geom={type:"MultiPoint",coordinates:coordinates};return feature(geom,properties,options)}exports.multiPoint=multiPoint;function multiPolygon(coordinates,properties,options){if(options===void 0){options={}}var geom={type:"MultiPolygon",coordinates:coordinates};return feature(geom,properties,options)}exports.multiPolygon=multiPolygon;function geometryCollection(geometries,properties,options){if(options===void 0){options={}}var geom={type:"GeometryCollection",geometries:geometries};return feature(geom,properties,options)}exports.geometryCollection=geometryCollection;function round(num,precision){if(precision===void 0){precision=0}if(precision&&!(precision>=0)){throw new Error("precision must be a positive number")}var multiplier=Math.pow(10,precision||0);return Math.round(num*multiplier)/multiplier}exports.round=round;function radiansToLength(radians,units){if(units===void 0){units="kilometers"}var factor=exports.factors[units];if(!factor){throw new Error(units+" units is invalid")}return radians*factor}exports.radiansToLength=radiansToLength;function lengthToRadians(distance,units){if(units===void 0){units="kilometers"}var factor=exports.factors[units];if(!factor){throw new Error(units+" units is invalid")}return distance/factor}exports.lengthToRadians=lengthToRadians;function lengthToDegrees(distance,units){return radiansToDegrees(lengthToRadians(distance,units))}exports.lengthToDegrees=lengthToDegrees;function bearingToAzimuth(bearing){var angle=bearing%360;if(angle<0){angle+=360}return angle}exports.bearingToAzimuth=bearingToAzimuth;function radiansToDegrees(radians){var degrees=radians%(2*Math.PI);return degrees*180/Math.PI}exports.radiansToDegrees=radiansToDegrees;function degreesToRadians(degrees){var radians=degrees%360;return radians*Math.PI/180}exports.degreesToRadians=degreesToRadians;function convertLength(length,originalUnit,finalUnit){if(originalUnit===void 0){originalUnit="kilometers"}if(finalUnit===void 0){finalUnit="kilometers"}if(!(length>=0)){throw new Error("length must be a positive number")}return radiansToLength(lengthToRadians(length,originalUnit),finalUnit)}exports.convertLength=convertLength;function convertArea(area,originalUnit,finalUnit){if(originalUnit===void 0){originalUnit="meters"}if(finalUnit===void 0){finalUnit="kilometers"}if(!(area>=0)){throw new Error("area must be a positive number")}var startFactor=exports.areaFactors[originalUnit];if(!startFactor){throw new Error("invalid original units")}var finalFactor=exports.areaFactors[finalUnit];if(!finalFactor){throw new Error("invalid final units")}return area/startFactor*finalFactor}exports.convertArea=convertArea;function isNumber(num){return!isNaN(num)&&num!==null&&!Array.isArray(num)}exports.isNumber=isNumber;function isObject(input){return!!input&&input.constructor===Object}exports.isObject=isObject;function validateBBox(bbox){if(!bbox){throw new Error("bbox is required")}if(!Array.isArray(bbox)){throw new Error("bbox must be an Array")}if(bbox.length!==4&&bbox.length!==6){throw new Error("bbox must be an Array of 4 or 6 numbers")}bbox.forEach(function(num){if(!isNumber(num)){throw new Error("bbox must only contain numbers")}})}exports.validateBBox=validateBBox;function validateId(id){if(!id){throw new Error("id is required")}if(["string","number"].indexOf(typeof id)===-1){throw new Error("id must be a number or a string")}}exports.validateId=validateId},{}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");function getCoord(coord){if(!coord){throw new Error("coord is required")}if(!Array.isArray(coord)){if(coord.type==="Feature"&&coord.geometry!==null&&coord.geometry.type==="Point"){return coord.geometry.coordinates}if(coord.type==="Point"){return coord.coordinates}}if(Array.isArray(coord)&&coord.length>=2&&!Array.isArray(coord[0])&&!Array.isArray(coord[1])){return coord}throw new Error("coord must be GeoJSON Point or an Array of numbers")}exports.getCoord=getCoord;function getCoords(coords){if(Array.isArray(coords)){return coords}if(coords.type==="Feature"){if(coords.geometry!==null){return coords.geometry.coordinates}}else{if(coords.coordinates){return coords.coordinates}}throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}exports.getCoords=getCoords;function containsNumber(coordinates){if(coordinates.length>1&&helpers_1.isNumber(coordinates[0])&&helpers_1.isNumber(coordinates[1])){return true}if(Array.isArray(coordinates[0])&&coordinates[0].length){return containsNumber(coordinates[0])}throw new Error("coordinates must only contain numbers")}exports.containsNumber=containsNumber;function geojsonType(value,type,name){if(!type||!name){throw new Error("type and name required")}if(!value||value.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)}}exports.geojsonType=geojsonType;function featureOf(feature,type,name){if(!feature){throw new Error("No feature passed")}if(!name){throw new Error(".featureOf() requires a name")}if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}exports.featureOf=featureOf;function collectionOf(featureCollection,type,name){if(!featureCollection){throw new Error("No featureCollection passed")}if(!name){throw new Error(".collectionOf() requires a name")}if(!featureCollection||featureCollection.type!=="FeatureCollection"){throw new Error("Invalid input to "+name+", FeatureCollection required")}for(var _i=0,_a=featureCollection.features;_i<_a.length;_i++){var feature=_a[_i];if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}}exports.collectionOf=collectionOf;function getGeom(geojson){if(geojson.type==="Feature"){return geojson.geometry}return geojson}exports.getGeom=getGeom;function getType(geojson,_name){if(geojson.type==="FeatureCollection"){return"FeatureCollection"}if(geojson.type==="GeometryCollection"){return"GeometryCollection"}if(geojson.type==="Feature"&&geojson.geometry!==null){return geojson.geometry.type}return geojson.type}exports.getType=getType},{"@turf/helpers":6}],8:[function(require,module,exports){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");var line_segment_1=__importDefault(require("@turf/line-segment"));var meta_1=require("@turf/meta");var geojson_rbush_1=__importDefault(require("geojson-rbush"));function lineIntersect(line1,line2){var unique={};var results=[];if(line1.type==="LineString"){line1=helpers_1.feature(line1)}if(line2.type==="LineString"){line2=helpers_1.feature(line2)}if(line1.type==="Feature"&&line2.type==="Feature"&&line1.geometry!==null&&line2.geometry!==null&&line1.geometry.type==="LineString"&&line2.geometry.type==="LineString"&&line1.geometry.coordinates.length===2&&line2.geometry.coordinates.length===2){var intersect=intersects(line1,line2);if(intersect){results.push(intersect)}return helpers_1.featureCollection(results)}var tree=geojson_rbush_1.default();tree.load(line_segment_1.default(line2));meta_1.featureEach(line_segment_1.default(line1),function(segment){meta_1.featureEach(tree.search(segment),function(match){var intersect=intersects(segment,match);if(intersect){var key=invariant_1.getCoords(intersect).join(",");if(!unique[key]){unique[key]=true;results.push(intersect)}}})});return helpers_1.featureCollection(results)}function intersects(line1,line2){var coords1=invariant_1.getCoords(line1);var coords2=invariant_1.getCoords(line2);if(coords1.length!==2){throw new Error("<intersects> line1 must only contain 2 coordinates")}if(coords2.length!==2){throw new Error("<intersects> line2 must only contain 2 coordinates")}var x1=coords1[0][0];var y1=coords1[0][1];var x2=coords1[1][0];var y2=coords1[1][1];var x3=coords2[0][0];var y3=coords2[0][1];var x4=coords2[1][0];var y4=coords2[1][1];var denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1);var numeA=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3);var numeB=(x2-x1)*(y1-y3)-(y2-y1)*(x1-x3);if(denom===0){if(numeA===0&&numeB===0){return null}return null}var uA=numeA/denom;var uB=numeB/denom;if(uA>=0&&uA<=1&&uB>=0&&uB<=1){var x=x1+uA*(x2-x1);var y=y1+uA*(y2-y1);return helpers_1.point([x,y])}return null}exports.default=lineIntersect},{"@turf/helpers":6,"@turf/invariant":7,"@turf/line-segment":9,"@turf/meta":10,"geojson-rbush":12}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");var meta_1=require("@turf/meta");function lineSegment(geojson){if(!geojson){throw new Error("geojson is required")}var results=[];meta_1.flattenEach(geojson,function(feature){lineSegmentFeature(feature,results)});return helpers_1.featureCollection(results)}function lineSegmentFeature(geojson,results){var coords=[];var geometry=geojson.geometry;if(geometry!==null){switch(geometry.type){case"Polygon":coords=invariant_1.getCoords(geometry);break;case"LineString":coords=[invariant_1.getCoords(geometry)]}coords.forEach(function(coord){var segments=createSegments(coord,geojson.properties);segments.forEach(function(segment){segment.id=results.length;results.push(segment)})})}}function createSegments(coords,properties){var segments=[];coords.reduce(function(previousCoords,currentCoords){var segment=helpers_1.lineString([previousCoords,currentCoords],properties);segment.bbox=bbox(previousCoords,currentCoords);segments.push(segment);return currentCoords});return segments}function bbox(coords1,coords2){var x1=coords1[0];var y1=coords1[1];var x2=coords2[0];var y2=coords2[1];var west=x1<x2?x1:x2;var south=y1<y2?y1:y2;var east=x1>x2?x1:x2;var north=y1>y2?y1:y2;return[west,south,east,north]}exports.default=lineSegment},{"@turf/helpers":6,"@turf/invariant":7,"@turf/meta":10}],10:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers=require("@turf/helpers");function coordEach(geojson,callback,excludeWrapCoord){if(geojson===null)return;var j,k,l,geometry,stopG,coords,geometryMaybeCollection,wrapShrink=0,coordIndex=0,isGeometryCollection,type=geojson.type,isFeatureCollection=type==="FeatureCollection",isFeature=type==="Feature",stop=isFeatureCollection?geojson.features.length:1;for(var featureIndex=0;featureIndex<stop;featureIndex++){geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson;isGeometryCollection=geometryMaybeCollection?geometryMaybeCollection.type==="GeometryCollection":false;stopG=isGeometryCollection?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex++){var multiFeatureIndex=0;var geometryIndex=0;geometry=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection;if(geometry===null)continue;coords=geometry.coordinates;var geomType=geometry.type;wrapShrink=excludeWrapCoord&&(geomType==="Polygon"||geomType==="MultiPolygon")?1:0;switch(geomType){case null:break;case"Point":if(callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false)return false;coordIndex++;multiFeatureIndex++;break;case"LineString":case"MultiPoint":for(j=0;j<coords.length;j++){if(callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false)return false;coordIndex++;if(geomType==="MultiPoint")multiFeatureIndex++}if(geomType==="LineString")multiFeatureIndex++;break;case"Polygon":case"MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++){if(callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false)return false;coordIndex++}if(geomType==="MultiLineString")multiFeatureIndex++;if(geomType==="Polygon")geometryIndex++}if(geomType==="Polygon")multiFeatureIndex++;break;case"MultiPolygon":for(j=0;j<coords.length;j++){geometryIndex=0;for(k=0;k<coords[j].length;k++){for(l=0;l<coords[j][k].length-wrapShrink;l++){if(callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false)return false;coordIndex++}geometryIndex++}multiFeatureIndex++}break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(coordEach(geometry.geometries[j],callback,excludeWrapCoord)===false)return false;break;default:throw new Error("Unknown Geometry Type")}}}}function coordReduce(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;coordEach(geojson,function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){if(coordIndex===0&&initialValue===undefined)previousValue=currentCoord;else previousValue=callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)},excludeWrapCoord);return previousValue}function propEach(geojson,callback){var i;switch(geojson.type){case"FeatureCollection":for(i=0;i<geojson.features.length;i++){if(callback(geojson.features[i].properties,i)===false)break}break;case"Feature":callback(geojson.properties,0);break}}function propReduce(geojson,callback,initialValue){var previousValue=initialValue;propEach(geojson,function(currentProperties,featureIndex){if(featureIndex===0&&initialValue===undefined)previousValue=currentProperties;else previousValue=callback(previousValue,currentProperties,featureIndex)});return previousValue}function featureEach(geojson,callback){if(geojson.type==="Feature"){callback(geojson,0)}else if(geojson.type==="FeatureCollection"){for(var i=0;i<geojson.features.length;i++){if(callback(geojson.features[i],i)===false)break}}}function featureReduce(geojson,callback,initialValue){var previousValue=initialValue;featureEach(geojson,function(currentFeature,featureIndex){if(featureIndex===0&&initialValue===undefined)previousValue=currentFeature;else previousValue=callback(previousValue,currentFeature,featureIndex)});return previousValue}function coordAll(geojson){var coords=[];coordEach(geojson,function(coord){coords.push(coord)});return coords}function geomEach(geojson,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,featureProperties,featureBBox,featureId,featureIndex=0,isFeatureCollection=geojson.type==="FeatureCollection",isFeature=geojson.type==="Feature",stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i++){geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson;featureProperties=isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{};featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:undefined;featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:undefined;isGeometryCollection=geometryMaybeCollection?geometryMaybeCollection.type==="GeometryCollection":false;stopG=isGeometryCollection?geometryMaybeCollection.geometries.length:1;for(g=0;g<stopG;g++){geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection;if(geometry===null){if(callback(null,featureIndex,featureProperties,featureBBox,featureId)===false)return false;continue}switch(geometry.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(callback(geometry,featureIndex,featureProperties,featureBBox,featureId)===false)return false;break}case"GeometryCollection":{for(j=0;j<geometry.geometries.length;j++){if(callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,featureId)===false)return false}break}default:throw new Error("Unknown Geometry Type")}}featureIndex++}}function geomReduce(geojson,callback,initialValue){var previousValue=initialValue;geomEach(geojson,function(currentGeometry,featureIndex,featureProperties,featureBBox,featureId){if(featureIndex===0&&initialValue===undefined)previousValue=currentGeometry;else previousValue=callback(previousValue,currentGeometry,featureIndex,featureProperties,featureBBox,featureId)});return previousValue}function flattenEach(geojson,callback){geomEach(geojson,function(geometry,featureIndex,properties,bbox,id){var type=geometry===null?null:geometry.type;switch(type){case null:case"Point":case"LineString":case"Polygon":if(callback(helpers.feature(geometry,properties,{bbox:bbox,id:id}),featureIndex,0)===false)return false;return}var geomType;switch(type){case"MultiPoint":geomType="Point";break;case"MultiLineString":geomType="LineString";break;case"MultiPolygon":geomType="Polygon";break}for(var multiFeatureIndex=0;multiFeatureIndex<geometry.coordinates.length;multiFeatureIndex++){var coordinate=geometry.coordinates[multiFeatureIndex];var geom={type:geomType,coordinates:coordinate};if(callback(helpers.feature(geom,properties),featureIndex,multiFeatureIndex)===false)return false}})}function flattenReduce(geojson,callback,initialValue){var previousValue=initialValue;flattenEach(geojson,function(currentFeature,featureIndex,multiFeatureIndex){if(featureIndex===0&&multiFeatureIndex===0&&initialValue===undefined)previousValue=currentFeature;else previousValue=callback(previousValue,currentFeature,featureIndex,multiFeatureIndex)});return previousValue}function segmentEach(geojson,callback){flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){var segmentIndex=0;if(!feature.geometry)return;var type=feature.geometry.type;if(type==="Point"||type==="MultiPoint")return;var previousCoords;var previousFeatureIndex=0;var previousMultiIndex=0;var prevGeomIndex=0;if(coordEach(feature,function(currentCoord,coordIndex,featureIndexCoord,multiPartIndexCoord,geometryIndex){if(previousCoords===undefined||featureIndex>previousFeatureIndex||multiPartIndexCoord>previousMultiIndex||geometryIndex>prevGeomIndex){previousCoords=currentCoord;previousFeatureIndex=featureIndex;previousMultiIndex=multiPartIndexCoord;prevGeomIndex=geometryIndex;segmentIndex=0;return}var currentSegment=helpers.lineString([previousCoords,currentCoord],feature.properties);if(callback(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex)===false)return false;segmentIndex++;previousCoords=currentCoord})===false)return false})}function segmentReduce(geojson,callback,initialValue){var previousValue=initialValue;var started=false;segmentEach(geojson,function(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex){if(started===false&&initialValue===undefined)previousValue=currentSegment;else previousValue=callback(previousValue,currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex);started=true});return previousValue}function lineEach(geojson,callback){if(!geojson)throw new Error("geojson is required");flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){if(feature.geometry===null)return;var type=feature.geometry.type;var coords=feature.geometry.coordinates;switch(type){case"LineString":if(callback(feature,featureIndex,multiFeatureIndex,0,0)===false)return false;break;case"Polygon":for(var geometryIndex=0;geometryIndex<coords.length;geometryIndex++){if(callback(helpers.lineString(coords[geometryIndex],feature.properties),featureIndex,multiFeatureIndex,geometryIndex)===false)return false}break}})}function lineReduce(geojson,callback,initialValue){var previousValue=initialValue;lineEach(geojson,function(currentLine,featureIndex,multiFeatureIndex,geometryIndex){if(featureIndex===0&&initialValue===undefined)previousValue=currentLine;else previousValue=callback(previousValue,currentLine,featureIndex,multiFeatureIndex,geometryIndex)});return previousValue}function findSegment(geojson,options){options=options||{};if(!helpers.isObject(options))throw new Error("options is invalid");var featureIndex=options.featureIndex||0;var multiFeatureIndex=options.multiFeatureIndex||0;var geometryIndex=options.geometryIndex||0;var segmentIndex=options.segmentIndex||0;var properties=options.properties;var geometry;switch(geojson.type){case"FeatureCollection":if(featureIndex<0)featureIndex=geojson.features.length+featureIndex;properties=properties||geojson.features[featureIndex].properties;geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties;geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(geometry===null)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":case"MultiPoint":return null;case"LineString":if(segmentIndex<0)segmentIndex=coords.length+segmentIndex-1;return helpers.lineString([coords[segmentIndex],coords[segmentIndex+1]],properties,options);case"Polygon":if(geometryIndex<0)geometryIndex=coords.length+geometryIndex;if(segmentIndex<0)segmentIndex=coords[geometryIndex].length+segmentIndex-1;return helpers.lineString([coords[geometryIndex][segmentIndex],coords[geometryIndex][segmentIndex+1]],properties,options);case"MultiLineString":if(multiFeatureIndex<0)multiFeatureIndex=coords.length+multiFeatureIndex;if(segmentIndex<0)segmentIndex=coords[multiFeatureIndex].length+segmentIndex-1;return helpers.lineString([coords[multiFeatureIndex][segmentIndex],coords[multiFeatureIndex][segmentIndex+1]],properties,options);case"MultiPolygon":if(multiFeatureIndex<0)multiFeatureIndex=coords.length+multiFeatureIndex;if(geometryIndex<0)geometryIndex=coords[multiFeatureIndex].length+geometryIndex;if(segmentIndex<0)segmentIndex=coords[multiFeatureIndex][geometryIndex].length-segmentIndex-1;return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex],coords[multiFeatureIndex][geometryIndex][segmentIndex+1]],properties,options)}throw new Error("geojson is invalid")}function findPoint(geojson,options){options=options||{};if(!helpers.isObject(options))throw new Error("options is invalid");var featureIndex=options.featureIndex||0;var multiFeatureIndex=options.multiFeatureIndex||0;var geometryIndex=options.geometryIndex||0;var coordIndex=options.coordIndex||0;var properties=options.properties;var geometry;switch(geojson.type){case"FeatureCollection":if(featureIndex<0)featureIndex=geojson.features.length+featureIndex;properties=properties||geojson.features[featureIndex].properties;geometry=geojson.features[featureIndex].geometry;break;case"Feature":properties=properties||geojson.properties;geometry=geojson.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(geometry===null)return null;var coords=geometry.coordinates;switch(geometry.type){case"Point":return helpers.point(coords,properties,options);case"MultiPoint":if(multiFeatureIndex<0)multiFeatureIndex=coords.length+multiFeatureIndex;return helpers.point(coords[multiFeatureIndex],properties,options);case"LineString":if(coordIndex<0)coordIndex=coords.length+coordIndex;return helpers.point(coords[coordIndex],properties,options);case"Polygon":if(geometryIndex<0)geometryIndex=coords.length+geometryIndex;if(coordIndex<0)coordIndex=coords[geometryIndex].length+coordIndex;return helpers.point(coords[geometryIndex][coordIndex],properties,options);case"MultiLineString":if(multiFeatureIndex<0)multiFeatureIndex=coords.length+multiFeatureIndex;if(coordIndex<0)coordIndex=coords[multiFeatureIndex].length+coordIndex;return helpers.point(coords[multiFeatureIndex][coordIndex],properties,options);case"MultiPolygon":if(multiFeatureIndex<0)multiFeatureIndex=coords.length+multiFeatureIndex;if(geometryIndex<0)geometryIndex=coords[multiFeatureIndex].length+geometryIndex;if(coordIndex<0)coordIndex=coords[multiFeatureIndex][geometryIndex].length-coordIndex;return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex],properties,options)}throw new Error("geojson is invalid")}exports.coordAll=coordAll;exports.coordEach=coordEach;exports.coordReduce=coordReduce;exports.featureEach=featureEach;exports.featureReduce=featureReduce;exports.findPoint=findPoint;exports.findSegment=findSegment;exports.flattenEach=flattenEach;exports.flattenReduce=flattenReduce;exports.geomEach=geomEach;exports.geomReduce=geomReduce;exports.lineEach=lineEach;exports.lineReduce=lineReduce;exports.propEach=propEach;exports.propReduce=propReduce;exports.segmentEach=segmentEach;exports.segmentReduce=segmentReduce},{"@turf/helpers":6}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");function default_1(poly,options){if(options===void 0){options={}}var geom=invariant_1.getGeom(poly);if(!options.properties&&poly.type==="Feature"){options.properties=poly.properties}switch(geom.type){case"Polygon":return polygonToLine(geom,options);case"MultiPolygon":return multiPolygonToLine(geom,options);default:throw new Error("invalid poly")}}exports.default=default_1;function polygonToLine(poly,options){if(options===void 0){options={}}var geom=invariant_1.getGeom(poly);var coords=geom.coordinates;var properties=options.properties?options.properties:poly.type==="Feature"?poly.properties:{};return coordsToLine(coords,properties)}exports.polygonToLine=polygonToLine;function multiPolygonToLine(multiPoly,options){if(options===void 0){options={}}var geom=invariant_1.getGeom(multiPoly);var coords=geom.coordinates;var properties=options.properties?options.properties:multiPoly.type==="Feature"?multiPoly.properties:{};var lines=[];coords.forEach(function(coord){lines.push(coordsToLine(coord,properties))});return helpers_1.featureCollection(lines)}exports.multiPolygonToLine=multiPolygonToLine;function coordsToLine(coords,properties){if(coords.length>1){return helpers_1.multiLineString(coords,properties)}return helpers_1.lineString(coords[0],properties)}exports.coordsToLine=coordsToLine},{"@turf/helpers":6,"@turf/invariant":7}],12:[function(require,module,exports){var rbush=require("rbush");var helpers=require("@turf/helpers");var meta=require("@turf/meta");var turfBBox=require("@turf/bbox").default;var featureEach=meta.featureEach;var coordEach=meta.coordEach;var polygon=helpers.polygon;var featureCollection=helpers.featureCollection;function geojsonRbush(maxEntries){var tree=new rbush(maxEntries);tree.insert=function(feature){if(feature.type!=="Feature")throw new Error("invalid feature");feature.bbox=feature.bbox?feature.bbox:turfBBox(feature);return rbush.prototype.insert.call(this,feature)};tree.load=function(features){var load=[];if(Array.isArray(features)){features.forEach(function(feature){if(feature.type!=="Feature")throw new Error("invalid features");feature.bbox=feature.bbox?feature.bbox:turfBBox(feature);load.push(feature)})}else{featureEach(features,function(feature){if(feature.type!=="Feature")throw new Error("invalid features");feature.bbox=feature.bbox?feature.bbox:turfBBox(feature);load.push(feature)})}return rbush.prototype.load.call(this,load)};tree.remove=function(feature,equals){if(feature.type!=="Feature")throw new Error("invalid feature");feature.bbox=feature.bbox?feature.bbox:turfBBox(feature);return rbush.prototype.remove.call(this,feature,equals)};tree.clear=function(){return rbush.prototype.clear.call(this)};tree.search=function(geojson){var features=rbush.prototype.search.call(this,this.toBBox(geojson));return featureCollection(features)};tree.collides=function(geojson){return rbush.prototype.collides.call(this,this.toBBox(geojson))};tree.all=function(){var features=rbush.prototype.all.call(this);return featureCollection(features)};tree.toJSON=function(){return rbush.prototype.toJSON.call(this)};tree.fromJSON=function(json){return rbush.prototype.fromJSON.call(this,json)};tree.toBBox=function(geojson){var bbox;if(geojson.bbox)bbox=geojson.bbox;else if(Array.isArray(geojson)&&geojson.length===4)bbox=geojson;else if(Array.isArray(geojson)&&geojson.length===6)bbox=[geojson[0],geojson[1],geojson[3],geojson[4]];else if(geojson.type==="Feature")bbox=turfBBox(geojson);else if(geojson.type==="FeatureCollection")bbox=turfBBox(geojson);else throw new Error("invalid geojson");return{minX:bbox[0],minY:bbox[1],maxX:bbox[2],maxY:bbox[3]}};return tree}module.exports=geojsonRbush;module.exports.default=geojsonRbush},{"@turf/bbox":2,"@turf/helpers":6,"@turf/meta":10,rbush:13}],13:[function(require,module,exports){!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){"use strict";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r})},{}]},{},[1])(1)});