name: SOI Monthly Parse Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  schedule:
    - cron: 0 8 1 * *
  workflow_dispatch:


env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
jobs:
  Run-SOI-Parsing:
    timeout-minutes: 600
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: maps/SOI/uv.lock
          version: ">=0.5.29"

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev


      - name: Check for retile work
        id: retile_work
        run: |
          if [[ "$(gsutil ls gs://soi_data/to_retile.txt 2>/dev/null)" == "" ]]; then
            echo "AVAILABLE=false" >> $GITHUB_OUTPUT
          else
            mkdir -p data
            gsutil -m cp gs://soi_data/to_retile.txt data/to_retile.txt
            gsutil -m cp gs://soi_data/index.geojson data/index.geojson
            echo "AVAILABLE=true" >> $GITHUB_OUTPUT
          fi
      - name: Restore run data from cache
        uses: ramSeraph/cache-always@v0.0.1
        with:
          path: |
            staging/
            export/
            !export/pmtiles/*
          key:  soi-gcs-v6-${{ steps.date.outputs.date }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            soi-gcs-v6-${{ steps.date.outputs.date }}-${{ github.run_number }}-
            soi-gcs-v6-${{ steps.date.outputs.date }}-

      - name: Download pmtiles
        id: download-pmtiles
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cd maps/SOI
          ls staging || true
          if [[ -e staging/all_done ]]; then
            echo "download already done.. shortcircuiting"
            exit 0
          fi
          source .github/actions/releaser/rfuncs.sh
          mkdir -p export/pmtiles
          release_id="$(get_release_id soi-latest)"
          download_release_assets $release_id export/pmtiles
          mkdir -p staging

      - name: Retile sheets
        id: retile-sheets
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        run: |
          cd maps/SOI
          if [[ -e staging/retiling_done ]]; then
            exit 0
          fi
          mkdir -p export/tiles/
          mkdir -p staging/tiles/
          mkdir -p staging/pmtiles/
          GOOGLE_APPLICATION_CREDENTIALS=gauth.json uv run retile.py data/to_retile.txt
          rm -rf export/gtiffs/
          rm -rf export/tiles/
          rm -rf staging/gtiffs/
          touch staging/retiling_done
        timeout-minutes: 600

      - name: Partition pmtiles
        id: partition-pmtiles
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        run: |
          cd maps/SOI
          if [[ -e staging/all_done ]]; then
            exit 0
          fi
          mkdir temp
          TMPDIR=./temp uv run partition.py
          rm -rf export/
          rm -rf staging/tiles/"
          staging_files=$(find staging/pmtiles -type f)
          echo "staging_files: $staging_files"
          echo "release_files<<EOF" >> $GITHUB_OUTPUT
          echo "$staging_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          touch staging/all_done
          

      - name: Push pmtiles
        env:
          GH_TOKEN: ${{ github.token }}
        id: push-pmtiles
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        uses: ./.github/actions/releaser
        with:
          name: "SOI Open Series Maps"
          tag_name: soi-latest
          assets: ${{ steps.partition-pmtiles.outputs.release_files }} 
          body: "SOI Open Series Maps as partitioned PMTiles."
          gh_token: ${{ secrets.github_token }}

      - name: Cleanup
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        run: |
          rm -rf staging/*
          gsutil rm gs://soi_data/to_retile.txt

      - name: Setup fly tools
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        uses: superfly/flyctl-actions/setup-flyctl@1.5

      - name: Restart Fly Server
        if: steps.retile_work.outputs.AVAILABLE == 'true'
        run: |
          flyctl scale count 0 --app indianopenmaps -y
          flyctl scale count 1 --app indianopenmaps -y
 

